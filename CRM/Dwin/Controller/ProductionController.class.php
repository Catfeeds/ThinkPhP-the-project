<?php

namespace Dwin\Controller;

use Dwin\Model\MaterialModel;
use Dwin\Model\MaterialSubstituteModel;
use Dwin\Model\OrderformModel;
use Dwin\Model\OrderproductModel;
use Dwin\Model\IndustrialSeralScreenModel;
use Dwin\Model\ProductionLineModel;
use Dwin\Model\ProductionOrderModel;
use Dwin\Model\ProductionOrderProductModel;
use Dwin\Model\ProductionPlanAuditModel;
use Dwin\Model\ProductionPlanModel;
use Dwin\Model\ProductionPlanRecordModel;
use Dwin\Model\ProductionTaskModel;
use Dwin\Model\RepertorylistModel;
use Dwin\Model\StaffModel;
use Dwin\Model\StockAuditModel;
use Dwin\Model\StockOutProductionLineStatisticsModel;

//生产任务相关
class ProductionController extends CommonController
{
    const SUCCESS_STATUS = 1;
    const FAIL_STATUS    = -1;
    /* 生成订单号的表格名，对应数据库中的数据名称*/
    const PRODUCTION_PLAN_TABLE_NAME = 'production_plan';
    const STOCK_AUDIT_TABLE_NAME     = 'stock_audit';
    /* 编辑生产单的职位 */
    const EDIT_PRODUCTION_PLAN_AUTH = [13, 40, 1, 45, 46];      // 13: 生产经理 40: 生产经理助理  1: 总经理
    /* 删除生产单的职位 */
    const DELETE_PRODUCTION_PLAN_AUTH = [1,45];      // 13: 生产经理 40: 生产经理助理  1: 总经理
    /* 导出生产单的职位 */
    const EXPORT_PRODUCTION_PLAN_AUTH = [1, 12, 40, 45, 46];
    /* 单据审核roleId*/
    const INVOICE_CONFIRM_AUTH = [1, 16, 48];     // 1: 总经理 16: 出纳
    /* 产线确认roleId*/
    const PRODUCTION_LINE_CONFIRM_AUTH = [1, 40, 48, 46];      // 1: 总经理 13: 生产经理  40: 生产经理助理 48: 物流助理
    /* 齐料登记roleId 暂时还没用这个,目前是生产的产品对应仓库的库管确认*/
    const MATERIAL_ADD_AUTH = [1, 43, 44];    // 1: 总经理  43: 物流线线长    44: 库管员
    /* 齐料确认roleId 目前是对应仓库库管确认*/
    const MATERIAL_CONFIRM_AUTH = [1, 43, 44];        // 1: 总经理   43: 物流线线长   44: 库管员
    /* 外协人员职位*/
    const OUTSIDE_ROLE = [50];

    const PRODUCTION_WAREHOUSE = "K001,K002,K003";// 半成品库、元器件库A\B
    const PRODUCTION_INPUT_WAREHOUSE = "K003,K004"; // 生产可入库的库房编号
    /* 单据状态*/
    const ORDER_WAIT = 1; // 单据待审核
    const STOCK_WAIT = 2; // 单据齐料待确认
    const PRODUCTION_WAIT  = 4; // 待产线确认
    const PRODUCTION_DOING = 3; // 生产中
    const PRODUCTION_DONE  = 5; // 生产完毕
    const IS_PRODUCTION = "1,2,3,4";



    protected $timeLimit;
    protected $productionLine;
    protected $productionLineArray;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->productionLineArray = M('production_line')->where('pid = 0 and is_del = 0')->select();
        $this->productionLine = getPrjIds($this->productionLineArray, 'production_line') . ",生产线";
        $this->timeLimit = strtotime(date('Y-m-d', time()));
    }

    /**
     * 展示所有的生产计划
     * @author yang
     */
    public function productionPlan()
    {
        if (IS_POST){
            $outStaffIds = $this->getRoleStaffIds(self::OUTSIDE_ROLE);
            if (in_array($this->staffId, explode(',', $outStaffIds))) {
                $this->whereCondition['production_line'] = ['IN', '2,3'];
            }
            $model = new ProductionPlanModel();
            $this->posts = I('post.');
            $this->sqlCondition = $this->getSqlCondition($this->posts);

            $productionStatus = empty($this->posts['production_status']) ? self::IS_PRODUCTION : $this->posts['production_status'];
            $this->whereCondition['production_status'] = ['IN', $productionStatus];
            $this->whereCondition['plan.is_del'] = ['EQ', 0];
            $productionLine   = empty($this->posts['production_line']) ? $this->productionLine : $this->posts['production_line'];
            $this->whereCondition['production_line_name'] = ['IN', $productionLine];
            $count = $model->alias('plan')->where($this->whereCondition)->count();
            if ($this->sqlCondition['search']) {
                $this->whereCondition['plan.production_order|plan.staff_name|plan.stock_cate_name|plan.product_name|plan.production_line_name|plan.tips'] = ['LIKE', "%" . trim($this->sqlCondition['search']) . "%"];
            }
            $filterCount = $model->alias('plan')->where($this->whereCondition)->count();

            $data = $model->getProductionDataWithStock($this->whereCondition, $this->sqlCondition['start'], $this->sqlCondition['length'], $this->sqlCondition['order'] . ",plan.id desc");

            foreach ($data as $key => &$value) {
                $value['DT_RowId'] = $value['production_order'];
                $value['yqts'] = floor((time() - strtotime($value['delivery_time'])) / (60*60*24));
                $filterMap['product_id'] = ['eq', $value['product_id']];
                $filterMap['product_status'] = ['eq', 3];
                $n = M('production_plan')
                    -> where($filterMap)
                    -> sum('production_plan_rest_number');
                $value['production_plan_rest_num'] = $n ? $n : 0;
            }
            $this->output = $this->getDataTableOut($this->posts['draw'], $count, $filterCount, $data);
            $this->ajaxReturn($this->output);
        }else{
            $this->assign('line', $this->productionLineArray);
            $this->display();
        }
    }

    /**
     * 新增计划钱如果有销货单就输入销货单
     */
    public function inputSaleOrder()
    {
        $staffID = session('staffId');
        $map = [
            'picid' => ['EQ', $staffID],
            'production_status' => ['IN', '0, 2'],
            'check_status' => ['EQ', '4']
        ];
        $orderList = M('orderform') -> where($map) -> select();
        foreach ($orderList as $key => &$value) {
            if ($value['production_status'] == 0){
                $value['status'] = '待处理';
            }else{
                $value['status'] = '未生产完成';
            }
        }
        $this->assign(compact('orderList'));
        $this->display();
    }

    /**
     * 新增生产计划
     * @author yang
     */
    public function addProductionPlan()
    {
        if (IS_POST){
            //防止重复提交 如果重复提交跳转至相关页面
//            if (!checkToken(I('post.TOKEN'))) {
//                $this->returnAjaxMsg('禁止重复提交数据', self::FAIL_STATUS);
//            }

            $model = new ProductionPlanModel();
            if ($model -> addProductionPlan()){
                $status = self::SUCCESS_STATUS;
                $msg = '添加成功';
            }else{
                $status = self::FAIL_STATUS;
                $msg = $model -> getError();
            }
            $this->ajaxReturn([
                'status' => $status,
                'msg' => $msg,
            ]);
        }else{
            createToken();
            $staffName = session('nickname');
            $map['pid'] = ['eq', '0'];
            $stockCate = M('stock_cate') -> select();
            $productionCompany = M('production_company') -> select();
            $productionLine = M('production_line')->where($map) -> select();
            $orderInfoArr = $this->getOrderNumber(self::PRODUCTION_PLAN_TABLE_NAME);
            $id = $orderInfoArr['orderId'];
            $production_order = 'SCRW-' . (int)$orderInfoArr['orderId'];
            $this->assign(compact('stockCate','staffName', 'id', 'productionCompany', 'productionLine', 'production_order'));
            $this->display();
        }
    }

    /**
     * 选择产品
     * @author: yang
     */
    public function chooseProduct()
    {
        if(IS_POST){
            $params = I('post.');
            $tableData = $this->dataTable($params);
            $model = new MaterialModel();
            $data['draw'] = (int) $params['draw'];
            $data['recordsTotal'] = $model -> count();
            $data['recordsFiltered'] = $model -> where($tableData['map']) -> count();
            if (empty($map['warehouse_number'])) {
                $map['warehouse_number'] = ['NOT IN', "K001,K002"];
            }
            $data['data'] = $model->index($tableData['map'], $params['start'], $params['length'], $tableData['order']);
            $this->ajaxReturn($data);
        }else{
            $this->display();
        }
    }

    /**
     * 新增有销货单的生产计划
     * @param $order_number    string      order number
     * @return bool
     */
    public function addProductionPlanByOrder($order_number = '')
    {
        $orderModel = new OrderformModel();
        $orderID = $orderModel -> getOrderIdByOrderNumber($order_number);
        $orderInfo = $orderModel -> field('stock_status, production_status') -> find($orderID);
        if ($orderInfo['production_status'] == 4){
            die('该订单不能下推生产单');
        }
        $orderProductModel = new OrderproductModel();

        $model = new ProductionPlanModel();
        if (IS_POST) {

//            if (!checkToken(I('post.TOKEN'))) {
//                $this->returnAjaxMsg('禁止重复提交数据', self::FAIL_STATUS);
//            }

            $orderID = I('post.orderID');
            $params = I('post.data');
            $productId = $model->getProductingIdWithOrderId($orderID);
            $productIDArr = [];
            foreach ($params as $key => $value) {
                if (in_array($value['product_id'], $productId)) {
                    $this->returnAjaxMsg('该物料已经提交过一次生产单，同一订单单型号只能提交1次生产单',self::FAIL_STATUS);
                }
                // 提交产品不允许重复
                if (in_array($value['product_id'], $productIDArr)){
                    $this->ajaxReturn([
                        'status' => self::FAIL_STATUS,
                        'msg' => '提交产品有重复'
                    ]);
                }else{
                    $productIDArr[] = $value['product_id'];
                }
                $orderInfo = $this->getOrderNumber(self::PRODUCTION_PLAN_TABLE_NAME);
                $params[$key]['production_order'] = 'SCRW-'. $orderInfo['orderId'];
                $params[$key]['id'] = $orderInfo['orderId'];
            }
            $res = $model -> addProductionPlanFromOrder($params, $orderID);
            if ($res){
                $status = self::SUCCESS_STATUS;
                $msg = '生产计划全部添加成功';
            }else{
                $status = self::FAIL_STATUS;
                $msg = $model -> getError();
            }
            $this->ajaxReturn([
                'status' => $status,
                'msg' => $msg
            ]);
        }else{
            $orderItem = $orderProductModel -> getItemByOrderID($orderID);
            createToken();
            $token = session('TOKEN');
            $staffName = session('nickname');
            $stockCate = M('stock_cate') -> select();
            $productionCompany = M('production_company') -> select();
            $productionLine = M('production_line') -> select();
            $url = U('', compact('order_number'));
            $this->assign(compact('orderItem', 'staffName', 'stockCate', 'productionCompany', 'productionLine', 'orderID', 'orderInfo','token', 'url'));
            $this->display();
        }
    }

    /**
     * 修改生产计划详情
     * @param $id int 生产计划id
     */
    public function editProductionPlan($id)
    {
        if (IS_POST){
            if (!checkToken(I('post.TOKEN'))) {
                $this->returnAjaxMsg('表单唯一性验证失败，非法提交，请右键重新加载框架', self::FAIL_STATUS);
            }
            $model = new ProductionPlanModel();
            $productionPlan = $model -> find($id);
            if (!$this->checkAuthByRole(self::EDIT_PRODUCTION_PLAN_AUTH)){
                if ($productionPlan['production_status'] == 1) {
                    $authFlag = $productionPlan['staff_id'] == $this->staffId ? true : false;
                    if (!$authFlag) {
                        $this->returnAjaxMsg('您没有权限继续修改,如果权限设定有问题，请联系管理员',self::FAIL_STATUS);
                    }
                } else {

                    $this->ajaxReturn([
                        'status' => self::FAIL_STATUS,
                        'msg' => '你没有权限，如果权限设定有问题，请联系管理员',
                    ]);
                }
            }
            $data = [
                'stock_cate'         => I('post.beihuofangshi'),
                'stock_cate_name'    => M('stock_cate') -> find(I('post.beihuofangshi'))['stock_cate_name'],
                'production_company' => I('post.shengchandi'),
                'production_line'    => I('post.shengchanxian'),
                'production_line_name'  => M('production_line')->field('production_line')->find(I('post.shengchanxian'))['production_line'],
                'delivery_time'      => I('post.jq'),
                'tips'               => I('post.beizhu'),
                'fail_explain'       => I('post.weidachengshuoming'),
                'production_plan_number' => I('post.shengchanshuliang'),
                'product_id'         => I('post.product_id'),
                'product_name'       => I('post.product_name'),
            ];

            if ($data['production_plan_number'] != $productionPlan['production_plan_number'] || $data['product_id'] != $productionPlan['product_id']){
                if ($productionPlan['production_status'] == self::PRODUCTION_DONE){
                    $this->ajaxReturn([
                        'status' => self::FAIL_STATUS,
                        'msg'    => '该计划已经完工,不可修改',
                    ]);
                }
                // 根据权限判断是否可以修改生产中的生产计划 @todo DELETE_AUTH 与修改权限一致，没有单独做变量命名。
                if ($this->checkAuthByRole(self::DELETE_PRODUCTION_PLAN_AUTH)){
                    $res = $model -> editPlan1($data, $productionPlan);
                }else{
                    $res = $model -> editPlan2($data, $productionPlan);
                }
            }else{
                $res = $model -> update($id, $data);

            }
            if ($res){
                $status = self::SUCCESS_STATUS;
                $msg = '修改成功';
            }else{
                $status = self::FAIL_STATUS;
                $msg = $model -> getError();
            }
            $this->ajaxReturn([
                'status' => $status,
                'msg' => $msg,
            ]);
        }else{
            createToken();
            $stockCate = M('stock_cate') -> select();
            $productionCompany = M('production_company') -> select();
            $productionLine = M('production_line') -> select();
            $plan = M('production_plan') -> find($id);
            $product_name = M('material') -> where(['product_id' => $plan['product_id']]) -> getField('product_name');
            $url = U('', compact('id'));
            $this->assign(compact('stockCate', 'productionCompany', 'productionLine', 'plan', 'product_name', 'url'));
            $this->display();
        }
    }

    /**
     * 删除生产计划
     * @param $id   int     生产计划id
     */
    public function delProductionPlan($id)
    {
        if (IS_POST){
            $model = new ProductionPlanModel();
            $productionPlan = M('production_plan')->field("*")->find($id);
            if (!$this->checkAuthByRole(self::DELETE_PRODUCTION_PLAN_AUTH)){
                if (($productionPlan['staff_id'] == $this->staffId) && ($productionPlan['production_status'] == self::ORDER_WAIT)) {
                    M()->startTrans();
                    if ($productionPlan['order_id'] != ''){
                        $res = $model -> delOrderPlan($id);
                    } else {
                        $res = M('production_plan') -> save(['id' => $id, 'is_del' => 1]);
                    }
                    $productModel = new MaterialModel();
                    $productUpdate = $productModel -> updateProducingNumber($productionPlan['product_id'], 0);
                    if ($res === false || $productUpdate === false) {
                        M() -> rollback();
                        $this->ajaxReturn([
                            'status' => self::FAIL_STATUS,
                            'msg' => '删除失败'
                        ]);
                    } else {
                        M() -> commit();
                        $this->ajaxReturn([
                            'status' => self::SUCCESS_STATUS,
                            'msg' => '删除成功'
                        ]);
                    }
                } else {
                    $this->ajaxReturn([
                        'status' => self::FAIL_STATUS,
                        'msg' => '生产单删除有权限，您无权处理，如有问题联系管理',
                    ]);
                }
            }
            if ($productionPlan['production_status'] == self::PRODUCTION_DOING) {
                $stockAuditModel = new StockAuditModel();
                $stockInLog = $stockAuditModel->showAllAuditActionOrderNumber($productionPlan['production_order'],StockAuditModel::IN_TYPE,StockAuditModel::AUDIT_PASS);
                if (count($stockInLog) != 0)
                    $this->returnAjaxMsg('该单据已经在生产中，且已有入库记录，不能进行删除',self::FAIL_STATUS);
                $productionOrderModel = new ProductionOrderModel();
                $productionOrderData = $productionOrderModel->getRelationOrderData($id);
                if (count($productionOrderData) != 0) {
                    foreach ($productionOrderData as $productionOrderDatum) {
                        if ($productionOrderDatum['stock_status'] != ProductionOrderModel::TYPE_UNTREATED)
                            $this->returnAjaxMsg('单据已经下推了生产计划，且已经领料，不能删除',self::FAIL_STATUS);
                    }
                }
                $rst = $model->delProductionPlanTrans($id);
                if ($rst === false)
                    $this->returnAjaxMsg($model->getError(),self::FAIL_STATUS);
                $this->returnAjaxMsg('删除完成', self::SUCCESS_STATUS);
            }else{
                M()->startTrans();
                if ($productionPlan['order_id'] != ''){
                    $res = $model -> delOrderPlan($id);
                }else {
                    $res = M('production_plan') -> save(['id' => $id, 'is_del' => 1]);
                }
                $recordModel = new ProductionPlanRecordModel();
                $recordUpdate = $recordModel -> delProductionPlanRecord($id);
                $productModel = new MaterialModel();
                $productUpdate = $productModel -> updateProducingNumber($productionPlan['product_id'], 0);
                if ($res === false || $productUpdate === false || $recordUpdate === false) {
                    M() -> rollback();
                    $this->ajaxReturn([
                        'status' => self::FAIL_STATUS,
                        'msg' => '删除失败'
                    ]);
                } else {
                    M() -> commit();
                    $this->ajaxReturn([
                        'status' => self::SUCCESS_STATUS,
                        'msg' => '删除成功'
                    ]);
                }
            }
        }
    }

    /**
     * 新增生产产品入库申请
     * @param $planId
     * @return bool
     */
    private function addPutinAudit($planId)
    {
        $planModel = new ProductionPlanModel();
        $repertoryModel = new RepertorylistModel();
        $productionPlanId = (int)$planId;
        $plan = $planModel -> index(['plan.id' => ['eq', $productionPlanId]])[0];

        // 判断该计划如果不是生产阶段
        if ($plan['production_status'] != self::PRODUCTION_DOING){
            return false;
        }
        $managerIds = $repertoryModel->getWarehouseManagerIds(self::PRODUCTION_INPUT_WAREHOUSE);
        $managerArr = explode(',', $managerIds);
        if (!in_array(session('staffId'), $managerArr)){
//            $this->redirect('Public/403');exit;
        }

        if (IS_POST){
            if (!checkToken(I('post.TOKEN'))) {
                $this->returnAjaxMsg('禁止重复提交数据', self::FAIL_STATUS);
            }
            $params = I('post.');
            $auditModel = new StockAuditModel();
            $res = $auditModel -> addAudit($params);
            if ($res) {
                $msg = '入库申请提交成功';
                $status = self::SUCCESS_STATUS;
            } else {
                $msg = $auditModel -> getError();
                $status = self::FAIL_STATUS;
            }
            $this->returnAjaxMsg($msg, $status);
        }else{
            createToken();

            $putInWarehouseData = $repertoryModel->getWarehouseManagerData(self::PRODUCTION_INPUT_WAREHOUSE);
            // 生产入库生产线
            $putinProductionLine = M('production_line') -> select();

            foreach ($putinProductionLine as $key => $value) {
                $putinProductionLine[$key]['arr'] = $value['id'] . '_' . $value['production_line'];
            }
            $putinProductionLineArr = $plan['production_line'] . '_' . $plan['production_line_name'];
            $orderInfoArr = $this->getOrderNumber(self::STOCK_AUDIT_TABLE_NAME);
            $id = $orderInfoArr['orderId'];
            $audit_order_number = 'RKJL-' . $orderInfoArr['orderId'];
            // 待入库数
            $waitAudit = $plan['production_i_audit_number'];
            // 已入库数
            $putIn = $plan['production_number'];
            // 审核员@todo 后续可能改审核人
//            $auditor = [];
//            $auditorIds = explode(',', M('repertorylist') -> find($plan['warehouse_number'])['logistics_staff_id']);
//            foreach ($auditorIds as $key => $value) {
//                $auditor[] = M('staff') -> field('id, name') -> find($value);
//            }
            // todo: 审核员暂时是只有他自己可以选,直接入库也是这样
            $auditor = [
                ['id' => session('staffId'), 'name' => session('nickname')]
            ];
            $url = U('', compact('planId'));
            // 查找所有入库分类
            $this->assign(compact('plan','putInWarehouseData', 'waitAudit','putIn', 'auditor', 'putinProductionLineArr','putinProductionLine', 'id', 'audit_order_number', 'url'));

            $this->display();
        }
    }


    /**
     * 展示所有单据审核
     * @author yang
     * @param $production_order
     */
    private function productionPlanAudit()
    {
        if (IS_POST){
            $production_order = I('production_order');
            $model = new ProductionPlanAuditModel();
            $res = $model -> getAuditByOrder($production_order);
            foreach ($res as $key => &$value) {
                $value['update_time'] = date('Y-m-d H:i:s', $value['update_time']);
            }
            $this->ajaxReturn($res);
        } else {
            $this->display();
        }
    }

    /**
     * 根据订单显示所有入库记录
     * @param $production_order
     */
    public function showStockAudit()
    {
        if (IS_POST){
            $production_order = I('production_order');
            $model = new StockAuditModel();
            $data = $model -> showAllAuditActionOrderNumber($production_order);
            foreach ($data as $key => &$value) {
                $value['update_time'] = date('Y-m-d H:i:s', $value['update_time']);
                $value['create_time'] = date('Y-m-d H:i:s', $value['create_time']);
            }
            $this->ajaxReturn($data);
        }
    }

    /**
     * 显示所有完工的生产计划
     */
    public function showCompleteProductionPlan()
    {
        if (IS_POST) {
            $outStaffIds = $this->getRoleStaffIds(self::OUTSIDE_ROLE);
            if (in_array($this->staffId, explode(',', $outStaffIds))) {
                $this->whereCondition['production_line'] = ['IN', '2,3'];
            }
            $params = I('post.');
            $productionPlanModel = new ProductionPlanModel();

            $this->sqlCondition = $this->getSqlCondition($params);
            $map = [];
            $count = $productionPlanModel->countCompletedNum($map);
            if (trim($this->sqlCondition['search'])) {
                $map['plan.production_order|plan.staff_name|plan.stock_cate_name|plan.product_name|plan.production_line_name|plan.tips'] = ['LIKE', '%' . trim($this->sqlCondition['search']) . '%'];
            }
            $map['is_del'] = ['EQ', 0];
            $recordsFiltered = $productionPlanModel->countCompletedNum($map);
            $data = $productionPlanModel->getCompleteProductionData($map, $this->sqlCondition['start'], $this->sqlCondition['length'], $this->sqlCondition['order']);

            $this->output = $this->getDataTableOut($params['draw'], $count, $recordsFiltered, $data);
            $this->ajaxReturn($this->output);
        } else {
            $this->display();
        }
    }

    /**
     * 根据生产订单获得所有的齐料登记, getPrepareRecordAjax是ajax方法返回的
     * @param $order_number string 生产订单号
     * @return string
     */
    public function getPrepareRecord($order_number)
    {
        $res = M('production_prepare_record')
            -> alias('prepare')
            -> where(['production_order_number' => $order_number])
            -> select();
        foreach ($res as $key => &$value) {
            $value['create_time'] = date('Y-m-d H:i:s', $value['create_time']);
        }
        return json_encode($res);
    }
    public function getPrepareRecordAjax()
    {
        $order_number = I('post.production_order');
        $res = M('production_prepare_record')
            -> alias('prepare')
            -> where(['production_order_number' => $order_number])
            -> select();
        foreach ($res as $key => &$value) {
            $value['create_time'] = date('Y-m-d H:i:s', $value['create_time']);
            $value['production_order'] = $order_number;
        }
        if (IS_POST){
            $this->ajaxReturn($res);
        }
    }
    public function getRelationOrderAjax()
    {
        $planId = I('post.planId');
        $productionModel = new ProductionOrderModel();
        $data = $productionModel->getRelationOrderData($planId);
        $this->ajaxReturn($data);
    }

    /**
     * 修改生产计划审核状态
     * @param   $production_order
     * @todo 库管添加
     */
    public function editProductionPlanAudit()
    {
        if(IS_POST){
            $planModel = new ProductionPlanModel();
            $repertoryModel = new RepertorylistModel();
            $params = I('post.');

            $field = 'plan.production_order, 
                      cate.stock_cate_name stock_cate, 
                      proposerTable.name proposer, 
                      auditorTable.name auditor, 
                      production_plan_number, 
                      company.production_company, 
                      product.product_name, 
                      line.production_line, 
                      plan.create_time, 
                      plan.delivery_time, 
                      plan.tips,
                      plan.production_status';
            $map['plan.production_order'] = ['EQ', $params['production_order']];
            $plan = $planModel -> getPlanInfo($map, $field);
            if ($plan['production_status'] == self::ORDER_WAIT) {
                if (!$this->checkAuthByRole(self::INVOICE_CONFIRM_AUTH)){
                    $this->returnAjaxMsg('无权限进行单据审核', self::FAIL_STATUS);
                }
            }
            if ($plan['production_status'] == self::PRODUCTION_WAIT) {
                if (!$this->checkAuthByRole(self::PRODUCTION_LINE_CONFIRM_AUTH)){
                    $this->returnAjaxMsg('无权限进行产线确认', self::FAIL_STATUS);
                }
            }

            if ($plan['production_status'] == self::PRODUCTION_DOING){
                $warehouseNumber = $repertoryModel->getWarehouseManagerIds(self::PRODUCTION_WAREHOUSE);
                $managerArr = explode(',', $warehouseNumber);
                if (!in_array(session('staffId'), $managerArr)){
                    $this->returnAjaxMsg('只有生产对应仓库库管才有权限添加', self::FAIL_STATUS);
                }
            }

            $params['auditor'] = session('staffId');
            $model = new ProductionPlanAuditModel();
            $result = $model -> editProductionPlanAudit($params, $plan);
            if ($result){
                $status = self::SUCCESS_STATUS;
                $msg = '审核成功';
            }else{
                $status = self::FAIL_STATUS;
                $msg = $model -> getError();
            }
            $this->ajaxReturn([
                'status' => $status,
                'msg' => $msg
            ]);
        } else {
            die('非法');
        }
    }

    /**
     * 添加齐料登记记录
     * @param $production_order_number
     */
    public function editPrepareRecord($production_order_number)
    {
        if (IS_POST){
//
//            if (!checkToken(I('post.TOKEN'))) {
//                $this->returnAjaxMsg('禁止重复提交数据', self::FAIL_STATUS);
//            }
            $addArr = [];
            $updateArr = [];
            $delArr = [];
            $params = I('post.data');
            foreach ($params as $key => $value) {
                if ($value['warehouse_name'] == '' && $value['product_name'] == '' && $value['num'] == '' && $value['tips'] == '') {
                    continue;
                }
                if (isset($value['id'])) {
                    if ($value['flag'] === 'del') {
                        $delArr[] = $value['id'];
                    } elseif (M("production_prepare_record") -> find($value['id']) != $value) {
                        $value['manager_name'] = session('nickname');
                        $value['update_time'] = time();
                        $updateArr[] = $value;
                    }
                }
                if ($value['flag'] === 'add') {
                    $value['manager_name'] = session('nickname');
                    $value['update_time'] = time();
                    $value['create_time'] = time();
                    $value['production_order_number'] = $production_order_number;
                    $value['is_ok'] = 1;
                    $addArr[] = $value;
                }
            }
            $model = M('production_prepare_record');
            $model -> startTrans();
            $addUpdate = true;
            if (count($addArr) !== 0){
                $addUpdate = $model -> addAll($addArr);
            }
            $saveUpdate = true;
            if (count($updateArr) !== 0){
                foreach ($updateArr as $key => $value) {
                    $res = $model -> save($value);
                    if ($res === false){
                        $saveUpdate = false;
                    }
                }
            }
            $delUpdate = true;
            if (count($delArr) !== 0){
                foreach ($delArr as $key => $value) {
                    $res = $model -> delete($value);
                    if ($res === false){
                        $delUpdate = false;
                    }
                }
            }
            $res = $addUpdate && $saveUpdate && $delUpdate;
            if ($res){
                $model -> commit();
                $this->ajaxReturn([
                    'status' => self::SUCCESS_STATUS,
                    'msg' => '修改成功'
                ]);
            }else{
                $model -> rollback();
                $this->ajaxReturn([
                    'status' => self::FAIL_STATUS,
                    'msg' => '修改失败'
                ]);
            }
        }else{
            createToken();
            $map = [
                'production_order_number' => ['EQ', $production_order_number]
            ];
            $url = U('', compact('planId'));
            $data = M('production_prepare_record') -> where($map) -> select();
            $this->assign(compact('data', 'url'));
            $this->display();
        }
    }

    /**
     * 物料登记确认与取消确认
     */
    public function prepareVerifyToggle()
    {
        $id = I('post.id');
        $is_ok = M('production_prepare_record') -> find($id)['is_ok'];
        $is_ok = $is_ok == 1 ? '0' : '1';
        $res = M('production_prepare_record') -> where(['id' => $id]) -> save(['is_ok' => $is_ok]);
        if ($res !== true){
            $msg = '更新成功';
            $status = self::SUCCESS_STATUS;
        }else{
            $msg = '更新失败';
            $status = self::FAIL_STATUS;
        }
        $this->ajaxReturn([
            'msg' => $msg,
            'status' => $status,
        ]);
    }

    /**
     * 物料登记删除
     * @param  $id
     */
    public function prepareDelete()
    {
        $id = I('post.id');
        $res = M('production_prepare_record') -> where(['id' => $id]) -> delete();
        if ($res !== true){
            $msg = '删除成功';
            $status = self::SUCCESS_STATUS;
        }else{
            $msg = '删除失败';
            $status = self::FAIL_STATUS;
        }
        $this->ajaxReturn([
            'msg' => $msg,
            'status' => $status,
        ]);
    }


    /**
     * 处理dataTables参数的方法
     * @author yang
     * @param $params array dataTables传的参数
     * @param array $_map   映射
     * @return array    数组中有用在where方法的map和用在order方法的order
     */
    protected function dataTable($params, $_map = [])
    {
        $dataField = [];
        $searchAble = [];
        foreach ($params['columns'] as $k => $v) {
            if (isset($_map[$v['data']])){
                $dataField[] = $_map[$v['data']];
            }else{
                $dataField[] = $v['data'];
            }
            if ($v['searchable'] == 'true'){
                if (isset($_map[$v['data']])){
                    $searchAble[] = $_map[$v['data']];
                }else{
                    $searchAble[] = $v['data'];
                }
            }
        }
        $order = $dataField[$params['order'][0]['column']] . ' ' . $params['order'][0]['dir'];
        if ($params['search']['value'] == ''){
            $map = [];
        }else{
            $searchAble = rtrim(implode('|', $searchAble), '|');
            $word = $params['search']['value'];
            $map = [$searchAble => ['LIKE',"%".$word."%"]];
        }
        return [
            'order' => $order,
            'map' => $map,
        ];
    }



    /**
     * 根据角色查询对应的所有职员
     * @param $role_ids mixed   role_id的集合,可以是数组或者字符串
     * @return array    符合条件的职员
     */
    protected function getAuditor($role_ids){
        $res = M('auth_role') -> where(['role_id' => ['IN', $role_ids]]) -> select();
        $role_ids = [];
        foreach ($res as $key => $value) {
            $role_ids = array_merge(explode(',',$value['staff_ids']), $role_ids);
        }
        $map = ['id' => ['IN', $role_ids], 'loginstatus' => ['NEQ','1']];
        $staffs = M('staff') -> field('id, name') -> where($map) -> select();
        return $staffs;
    }

    /**
     * 生产线生产入库统计
     */
    public function statistics()
    {
        if (IS_POST){
            $params = I('post.');
            $mapTableData = $this->dataTable($params);
            // 处理三种时间参数
            if (!empty($params['start_time'])){
                $mapTableData['map']['date'] = ['GT', substr($params['start_time'], 0, 10) - 1];
            }
            if (!empty($params['end_time'])){
                $mapTableData['map']['date'] = ['LT', substr($params['end_time'], 0, 10) - 1];
            }
            if (!empty($params['end_time']) && !empty($params['start_time'])){
                if ($params['end_time'] == $params['start_time']){
                    $params['end_time'] = strtotime('+1 day', $params['end_time']);
                    if ($params['view_type'] == 'month'){
                        $params['end_time'] = strtotime('+1 month', $params['end_time']);
                    }
                }
                $mapTableData['map']['date'] = ['BETWEEN', [substr($params['start_time'], 0, 10) - 1, substr($params['end_time'], 0, 10) - 1]];
            }

            $model = M('putin_production_line_statistics');

            // 搜索类型分按天搜索和按月搜索
            if ($params['view_type'] == 'date'){
                $data['draw'] = (int) $params['draw'];
                $data['recordsTotal'] = $model -> count();
                $data['recordsFiltered'] = $model -> where($mapTableData['map']) -> count();
                $data['data'] = $model -> where($mapTableData['map']) -> order($mapTableData['order']) -> limit($params['start'], $params['length']) -> select();
                foreach ($data['data'] as $key => &$value) {
                    $value['date'] = date('Y-m-d', $value['date']);
                }
            }
            if ($params['view_type'] == 'month'){
                $data['draw'] = (int) $params['draw'];
                $data['recordsTotal'] = $model -> count();
                $data['recordsFiltered'] = $model
                    ->field('month, year, sum(line1) line1, sum(line2) line2, sum(line3) line3, sum(line4) line4, sum(line5) line5')
                    ->where($mapTableData['map'])
                    ->group('month')
                    ->count();
                $data['data'] = $model
                    ->field('month, year, sum(line1) line1, sum(line2) line2, sum(line3) line3, sum(line4) line4,sum(line5) line5')
                    ->where($mapTableData['map'])
                    ->group('month')
                    ->order($mapTableData['order'])
                    ->limit($params['start'], $params['length'])
                    ->select();
                foreach ($data['data'] as $key => &$value) {
                    $value['date'] = $value['year'] . '-' . $value['month'];
                }
            }

            $this->ajaxReturn($data);
        }else{
            $this->display();
        }
    }

    /**
     * 领料出库单生产线生产入库统计
     */
    public function stockOutStatistics()
    {
        if (IS_POST){
            $params = I('post.');
            $mapTableData = $this->dataTable($params);
            // 处理三种时间参数
            if (!empty($params['start_time'])){
                $mapTableData['map']['date'] = ['GT', substr($params['start_time'], 0, 10) - 1];
            }
            if (!empty($params['end_time'])){
                $mapTableData['map']['date'] = ['LT', substr($params['end_time'], 0, 10) - 1];
            }
            if (!empty($params['end_time']) && !empty($params['start_time'])){
                if ($params['end_time'] == $params['start_time']){
                    $params['end_time'] = strtotime('+1 day', $params['end_time']);
                    if ($params['view_type'] == 'month'){
                        $params['end_time'] = strtotime('+1 month', $params['end_time']);
                    }
                }
                $mapTableData['map']['date'] = ['BETWEEN', [substr($params['start_time'], 0, 10) - 1, substr($params['end_time'], 0, 10) - 1]];
            }

            $model = new StockOutProductionLineStatisticsModel();

            // 搜索类型分按天搜索和按月搜索
            if ($params['view_type'] == 'date'){
                $data['draw'] = (int) $params['draw'];
                $data['recordsTotal'] = $model -> count();
                $data['recordsFiltered'] = $model -> where($mapTableData['map']) -> count();
                $data['data'] = $model -> where($mapTableData['map']) -> order($mapTableData['order']) -> limit($params['start'], $params['length']) -> select();
                foreach ($data['data'] as $key => &$value) {
                    $value['date'] = date('Y-m-d', $value['date']);
                }
            }
            if ($params['view_type'] == 'month'){
                $data['draw'] = (int) $params['draw'];
                $data['recordsTotal'] = $model -> count();
                $data['recordsFiltered'] = $model
                    ->field('month, year, sum(line1) line1, sum(line2) line2, sum(line3) line3, sum(line4) line4, sum(line5) line5')
                    ->where($mapTableData['map'])
                    ->group('month')
                    ->count();
                $data['data'] = $model
                    ->field('month, year, sum(line1) line1, sum(line2) line2, sum(line3) line3, sum(line4) line4,sum(line5) line5')
                    ->where($mapTableData['map'])
                    ->group('month')
                    ->order($mapTableData['order'])
                    ->limit($params['start'], $params['length'])
                    ->select();
                foreach ($data['data'] as $key => &$value) {
                    $value['date'] = $value['year'] . '-' . $value['month'];
                }
            }

            $this->ajaxReturn($data);
        }else{
            $this->display();
        }
    }

//    public function updateStaffInfoWorkingTime()
//    {
//        $model = M('staff_info');
//        $data = $model -> field('id, working_time') -> select();
//        foreach ($data as $key => &$value) {
//            if (strlen($value['working_time']) == 4){
//                $value['working_time'] = strtotime($value['working_time']. '-01-01');
//            }elseif (mb_strpos($value['working_time'], '月') !== false){
//                $yearArr = explode('年', $value['working_time']);
//                $monthArr = explode('月', $yearArr[1]);
//                $value['working_time'] = strtotime($yearArr[0] . '-' . $monthArr[0]);
//            }elseif (mb_strpos($value['working_time'], '年') !== false){
//                $yearArr = explode('年', $value['working_time']);
//                $value['working_time'] = strtotime($yearArr[0] . '-' . '01');
//            }elseif (strpos($value['working_time'], '.') !== false){
//                $arr = explode('.', $value['working_time']);
//                if (count($arr) == 1){
//                    $value['working_time'] = strtotime($arr[0] . '-' . '01');
//                }
//                if (count($arr) == 2 || count($arr) == 3){
//                    $value['working_time'] = strtotime($arr[0] . '-' . '01');
//                }
//            }elseif(strlen($value['working_time']) == 6){
//                $year = substr($value['working_time'], 0, 4);
//                $month = substr($value['working_time'], -2, 2);
//                $value['working_time'] = strtotime($year . '-' . $month);
//            }else{
//                $value['working_time'] = '';
//            }
//            $model -> save($value);
//        }
//    }

    /**
     * 导出今年的生产计划到Excel
     * @return  string  Excel的文件路径
     */
    public function getProductionPlanExcel()
    {

        if (!$this->checkAuthByRole(self::EXPORT_PRODUCTION_PLAN_AUTH)){
            $this->returnAjaxMsg('生产单导出有权限限制,您无权导出,权限有误请联系管理员', self::FAIL_STATUS);
        }
        $title = ['生产单号', '业务员', '备货', '型号', '生产线', '生产数量', '入库数量', '下单日期', '交期要求', '完工时间', '状态', '特殊要求', '生产中'];
        $letterArr = range('A', 'Z');
        Vendor('PHPExcel.PHPExcel');//引入类
        $excel = new \PHPExcel();
        $excel->getProperties()
              ->setCreator(session('nickname'))
              ->setLastModifiedBy("Dwin")
              ->setTitle("DWIN_PRODUCTION_STATISTICS")
              ->setSubject("statistics")
              ->setDescription("producton_File")
              ->setKeywords("statistics")
              ->setCategory("生产报表");
        $excel->getSecurity()->setLockWindows(true);
        $excel->getSecurity()->setLockStructure(true);
        $excel->getSecurity()->setWorkbookPassword("dwin_set_2002_hunan_beijing");
        $sheet = $excel -> getActiveSheet();
        foreach ($title as $key => $value) {
            $sheet->setCellValue($letterArr[$key] . 1,$value);
        }
        // 定义起始时间
        $startTime = strtotime(date("Y") . '-01-01');
        $endTime = strtotime('+1 years', $startTime) - 1;
        $map = [
            'create_time' => ['BETWEEN', [$startTime, $endTime]],
            'is_del' => ['EQ', 0]
        ];
        $data = M('production_plan')
            -> field('production_order, staff_name, stock_cate_name, product_name, production_line_name, production_plan_number, production_number, FROM_UNIXTIME(create_time), FROM_UNIXTIME(delivery_time), FROM_UNIXTIME(complete_time), production_status, tips, production_plan_rest_number')
            -> where($map)
            -> select();
        foreach ($data as $key1 => $value1) {
            $statusArr =  ['', '待审核', '齐料确认中', '生产中','待产线确认', '生产完成'];
            $value1['production_status'] = $statusArr[(int) $value1['production_status']];
            $value1 = array_values($value1);
            foreach ($value1 as $key2 => $value2) {
                $sheet->setCellValue($letterArr[$key2] . ($key1 + 2), $value2);
            }
        }
        $objwriter = \PHPExcel_IOFactory::createWriter($excel, 'Excel2007');
        $fileName = uniqid('ProductionPlan'). '_' . date('YmdH') . '.xlsx';
        $rootPath = WORKING_PATH . UPLOAD_ROOT_PATH . "/excel/";
        $objwriter->save($rootPath . $fileName);
        $this->returnAjaxMsg('导出成功',self::SUCCESS_STATUS, UPLOAD_ROOT_PATH  . '/excel/' . $fileName);
    }

    /**
     * productionIndex 未处理的生产中生产计划列表 用于合并订单为生产计划
     * dataTables前端，按照规定格式返回数据。
     * @todo 后续加筛选、查询功能 权限只有排产的人有权限。
    */
    public function productionIndex()
    {
        $productionModel = new ProductionPlanModel();
        if (IS_POST) {
            $this->posts = I('post.');
            $productionLine = empty($this->posts['production_line']) ? $this->productionLine : $this->posts['production_line'];
            $processStatus  = empty($this->posts['process_status']) ? $this->processStatus : $this->posts['process_status'];
            $this->whereCondition['production_line_name'] = ['IN', $productionLine];
            $this->whereCondition['scheduled_status'] = ['IN', $processStatus];
            $condition = $this->getSqlCondition($this->posts);

            list($count, $filterCount, $data) = $productionModel->getProcessingProduction($condition, $this->whereCondition);
            $this->output = $this->getDataTableOut($this->posts['draw'], $count,$filterCount, $data);
            $this->ajaxReturn($this->output);
        } else {
            $this->assign('processMap', ProductionPlanModel::$processMap);
            $this->assign('line', $this->productionLineArray);
            $this->display();
        }
    }

    /**
     * 获取orderId 对应的信息（源单、分配信息等）
     */
    public function getRelationDataWithOrderId()
    {
        if(IS_POST) {
            $orderId = I('post.productionOrderId');
            $returnDataSet = ['sourcePlan', 'productionTask','bomData', 'stockOutData'];
            $orderModel = new ProductionOrderModel();
            $data = $orderModel->getDataWithOrderId($orderId, $returnDataSet);
            $this->ajaxReturn($data);
        } else {
            die('非法请求');
        }
    }

    /**
     * addProductionOrder 生产计划提交接口
     * @return $msg = ['msg'=> ,'status' => , 'data' => ]。
     */
    public function addProductionOrder()
    {
        if (IS_POST) {
            $this->posts = I('post.');
            $productionOrderModel = new ProductionOrderModel();
            $rst = $productionOrderModel->addProductionOrderTrans($this->posts);

            $this->ajaxReturn($rst);
        }
    }

    /**
     * 修改生产计划接口
     */
    public function editProductionOrder(){
        if(IS_POST){
            $postData = I("post.");

            $productionModel = new ProductionOrderModel();
            $res = $productionModel->editProductOrder($postData);
            $this->ajaxReturn($res);
        }else {
            die("非法");
        }
    }

    /**
     * 删除生产计划
     */
    public function delProductionOrder(){
        if(IS_POST){
            $id = I("post.id");
            if(empty($id)){
                $this->returnAjaxMsg("参数不全",400);
            }
            $productionModel = new ProductionOrderModel();
            $res = $productionModel->delProductOrder($id);
            $this->ajaxReturn($res);
        }else {
            die("非法");
        }
    }

    /**
     * @todo 暂时无用 之前是后端做处理，将production plan 表中未下推生产计划的数据后端合并给前端，现已改为前端处理数组对象后传到addProductionOrder。
    */
    public function productionPreOrder()
    {
        if (IS_POST) {
            $this->posts = I('post.');
            $condition = $this->getSqlCondition($this->posts);
            $productionModel = new ProductionPlanModel();
            $data = $productionModel->getPreProductionOrder($condition);//plan_pid
            $planIds = getPrjIds($data,'plan_pid');
            $updData = $productionModel->getPreUpdateData($planIds);
            $count = $productionModel->getPreOrderNum();
            $this->output = $this->getDataTableOut($this->posts['draw'], $count, $count, $data);
            $this->output['updData'] = $updData;
            $this->ajaxReturn($this->output);
        }
    }
    /**
     * 生产计划列表页
    */
    public function productionOrderIndex()
    {
        if (IS_POST) {
            $this->posts = I('post.');
            $this->sqlCondition = $this->getSqlCondition($this->posts);
            $productionOrderModel = new ProductionOrderModel();
            $alias = "ord";

            $lineLimit   = $this->posts['lineLimit'] ? $this->posts['lineLimit'] : "1,2,3";
            $statusLimit = $this->posts['statusLimit'] ? $this->posts['statusLimit'] : "0,1,2";
            if(strlen($this->posts['status']) != 0){
                $map[$alias . ".audit_status"] = ['eq', $this->posts['status']];
            }
            $map[$alias . ".production_line"] = ['IN', $lineLimit];
            $map[$alias . ".production_status"] = ['IN', $statusLimit];
            $string = ((int)date('H',time()) > 15) ? (int)date('d',time()) + 1 : date('d', time());
            $this->timeLimit = strtotime(date('Y-m', time()) . "-" . $string);
            list($count, $filterCount, $data) = $productionOrderModel->getIndexData($this->sqlCondition, $map, $alias, $this->timeLimit);
            $this->output = $this->getDataTableOut($this->posts['draw'], $count, $filterCount, $data);
            $this->ajaxReturn($this->output);
        } else {
            $productionLineModel = new ProductionLineModel();
            $line = $productionLineModel->getProductionData();
            $this->assign([
                'line' => $line,
                'stockOutMap' => ProductionOrderModel::$stockOutMap,
                'auditMap' => ProductionOrderModel::$auditStatus
            ]);
            $this->display();
        }
    }

    /**
     * 生产计划BOM料单确认、审核
    */
    public function productionOrderAudit(){
        if(IS_POST){
            $id = I("post.id");
            $status = I("post.audit_status");
            if(empty($id)){
                $this->returnAjaxMsg("参数不全",400);
            }

            $orderModel = new ProductionOrderModel();
            $orderData = $orderModel->where(['id' => $id])->find();

            if($orderData['audit_status'] == ProductionOrderModel::TYPE_NO_CONFIRM){
                $this->returnAjaxMsg("当前生产计划BOM未确认",400);
            }

            if($orderData['audit_status'] != ProductionOrderModel::TYPE_NOT_AUDIT){
                $this->returnAjaxMsg("当前生产计划已审核",400);
            }

            $orderRes = $orderModel->where(['id' => $id])->setField(['audit_status' => $status]);

            if($orderRes === false){
                $this->returnAjaxMsg($orderModel->getError(),400);
            }
            $this->returnAjaxMsg("审核成功",200);
        }else {
            die("非法");
        }
    }

    /**
     * 下推生产计划实际bom组成数据
     */
    public function productionOrderCreateBom(){
        $productModel = new ProductionOrderProductModel();
        if(IS_POST){
            $postData = I("post.");

            if(empty($postData['order_id']) || empty($postData['product_data'])){
                $this->returnAjaxMsg("参数不全",400);
            }
            $data = $productModel->createBom($postData['order_id'], $postData['product_data']);
            $this->ajaxReturn($data);
        }else {
            $id = I("get.id"); // crm_production_order 的ID

            $productionOrderModel = new ProductionOrderModel();
            $productionOrderData = $productionOrderModel->getOrderBaseMsgById($id);

            $check = $productModel->where(['is_del' => ProductionOrderProductModel::NO_DEL, 'order_pid' => $id])->select();
            if(!empty($check)){
                die("已下推BOM实际组成物料");
            }

            if(empty($productionOrderData['bom_pid'])){
                die("当前生产订单没有bom");
            }

            // 当前生产任务单中所有的物料信息
            $materialData = $productionOrderModel->getOrderBomMsg($id);
            // 将替代物料放入对应的被替代物料信息数组里面
            $productIdArr= array_column($materialData, 'product_id');
            $replaceModel = new MaterialSubstituteModel();
            $replaceData = $replaceModel->findSubstituteByProductId($productIdArr, 2);
            $replaceDataArr = reformArray($replaceData, "product_id");

            foreach ($materialData as $k => &$v) {
                $v['replace_data'][] = [
                    'product_id'     => $v['product_id'],
                    'product_name'   => $v['product_name'],
                    "product_number" => $v['product_number'],
                    'product_no'     => $v['product_no'],
                    'warehouse_id'   => $v['rep_pid'],
                ];
                if(isset($replaceDataArr[$v['product_id']])){
                    $replaceDataArr[$v['product_id']]['product_id'] = $replaceDataArr[$v['product_id']]['substituted_id'];
                    $v['replace_data'][] = $replaceDataArr[$v['product_id']];
                }
            }

//            仓库名称map  从crm_repertorylist 表中查出
            $repertoryListModel = new RepertorylistModel();
            $repMap = $repertoryListModel->getStockOutList();

            $this->assign([
                'repMap'    => $repMap,  // 其他出库名称
                'productionOrderData' => $productionOrderData, // 领料订单源单信息
                'materialData' => $materialData, // bom物料信息
            ]);

            $this->display();
        }
    }

    /**
     * 根据Order生成Task(按天生成）
     * planOrder 生产数量/起止时间 为计划安排数量
     * planTask 关联入库信息 各个班组下一日可调配产能为产能 - 未完成工作量
    */
    public function addProductionTask()
    {
        if (IS_POST) {
            $this->posts = I('post.');
            $productionTaskModel = new ProductionTaskModel();
            $rst = $productionTaskModel->addProductionTaskTrans($this->posts);
            if ($rst === false) {
                $this->returnAjaxMsg($productionTaskModel->getError(),404);
            }
            $this->returnAjaxMsg('添加完毕，前往生产任务列表页可查看已分配任务',200);
        }
    }

    /**
     * 修改task
     */
    public function editProductionTask(){
        if (IS_POST) {
            $this->posts = I('post.');
            $productionTaskModel = new ProductionTaskModel();
            $res = $productionTaskModel->editProductTask($this->posts);
            $this->ajaxReturn($res);
        }else {
            die("非法");
        }
    }

    /**
     * 删除task
     */
    public function delProductionTask(){
        if(IS_POST){
            $id = I("post.id");
            if(empty($id)){
                $this->returnAjaxMsg("参数不全",400);
            }
            $productionTaskModel = new ProductionTaskModel();
            $res = $productionTaskModel->delProductionTask($id);
            $this->ajaxReturn($res);
        }else {
            die("非法");
        }
    }

    public function productionTaskIndex()
    {
        $lineModel = new ProductionLineModel();
        $filter['a.is_del'] = ['eq', 0];
        $condition['start'] = 0;
        $condition['length'] = 100;
        $lineData = $lineModel->getBaseInfo($filter, $condition);
        if (IS_POST) {
            $this->posts = I('post.');
            $this->sqlCondition = $this->getSqlCondition($this->posts);
            $taskModel = new ProductionTaskModel();
            $alias = "task";
            $lineLimit   = $this->posts['lineLimit'] ? $this->posts['lineLimit'] : getPrjIds($lineData, 'id');
            $statusLimit = $this->posts['statusLimit'] ? $this->posts['statusLimit'] : "0,1";
            $map[$alias . ".task_group"] = ['IN', $lineLimit];
            $map[$alias . ".production_status"] = ['IN', $statusLimit];
            $data = $taskModel->getIndexData($this->sqlCondition, $map, $alias);
            $count = $taskModel->alias($alias)->where($map)->count();
            $this->output = $this->getDataTableOut($this->posts['draw'], $count, $count, $data);
            $this->ajaxReturn($this->output);
        } else {
            $this->assign(compact('lineData'));
            $this->display();
        }
    }



    public function getRelationDataWithTaskId()
    {
        if (IS_POST) {
            $taskId = I('post.productionTaskId');
            if (empty($taskId)) {
                $this->ajaxReturn([]);
            }
            $returnDataSet = ['sourceOrder', 'stockInData'];
            $taskModel = new ProductionTaskModel();
            $data = $taskModel->getDataWithTaskId($taskId, $returnDataSet);
            $this->ajaxReturn($data);
        } else {
            die('非法操作');
        }
    }
    /**
     * 各个组产能分配情况
    */
    public function getGroupSituation()
    {
        if (IS_POST) {
            $this->posts = I('post.');
            $this->sqlCondition = $this->getSqlCondition($this->posts);
            $lineModel = new ProductionLineModel();
            $map['a.is_del'] = ['eq', 0];
            if ($this->posts['production_line']) {
                 $map['a.pid'] = ['eq', $this->posts['production_line']];
            }

            $data = $lineModel->getGroupDataWithTime($this->posts['timeLimit'],$map,$this->sqlCondition);

            $count = $lineModel->where($map)->count();
            $this->output = $this->getDataTableOut($this->posts['draw'], $count, $count, $data);
            $this->ajaxReturn($this->output);
        } else {
            $this->display();
        }
    }

    /**
     * 根据得到的production orderId 获取系统预计下推的生产任务
     * @todo $sqlCondition 后续要改为动态值。
    */
    public function getPreTaskData()
    {
        if (IS_POST) {
            $orderModel = new ProductionOrderModel();
            $map['a.id'] = ['IN', implode(',', I('post.orderIds'))];
            $status = $orderModel->alias('a')->where($map)->field('production_status,stock_status')->select();
            if (in_array(ProductionOrderModel::ASSIGN_DONE, explode(',',getPrjIds($status,'production_status')))) {
                $this->returnAjaxMsg('分配完毕不能下推', 400);
            }
            if (in_array(ProductionOrderModel::TYPE_UNTREATED,explode(",",getPrjIds($status,'stock_status'))))
                $this->returnAjaxMsg('还未下推领料，不能分配生产任务给生产班组',400);

            $string = ((int)date('H',time()) > 15) ? (int)date('d',time()) + 1 : date('d', time());
            $this->timeLimit = strtotime(date('Y-m', time()) . "-" . $string);
            $baseData  = $orderModel->getAssigningOrder($this->timeLimit, $map);

            $productionLineModel = new ProductionLineModel();
            $sqlCondition['start']  = 0;
            $sqlCondition['length'] = 100;
            $whereCondition['a.pid'] = ['IN', getPrjIds($baseData, 'production_line')];

            $assignData = $productionLineModel->getGroupDataWithTime($this->timeLimit, $whereCondition, $sqlCondition);// 各个分组可分配情况

            $taskData = $orderModel->getPreAssignTask($baseData, $assignData, $this->timeLimit);
            foreach ($assignData as &$v) {
                $v['pre_num'] = 0;
                foreach ($taskData as $k) {
                    if ($k['task_group'] == $v['id']) {
                        $v['pre_num'] += $k['task_number'];
                    }
                }
            }
            $this->returnAjaxMsg('ok', 200, compact('assignData', 'taskData'));
        } else {
            die('非法操作');
        }
    }

    /**
     * 添加生产入库数据接口
    */
    private function addStockInLog()
    {
        if (IS_POST) {
            $this->posts = I('post.');
            $taskModel = new ProductionTaskModel();
            $idData = $this->getOrderNumber('stock_in');
            $this->posts['base']['id'] = $idData['orderId'];
            $this->posts['base']['stock_in_id'] = 'OIN-' . $idData['orderId'];
            $rst = $taskModel->addStockInTrans($this->posts);
            if ($rst['status'] == 200) {
                $id = $this->posts['base']['source_id'];
                $resetStatusRst = $taskModel->resetTaskStatus($id);
                $this->ajaxReturn($resetStatusRst);
            }
            $this->ajaxReturn($rst);
        }
    }

    /**
     * 获取添加入库记录时的下拉选项
    */
    private function getSelectInfo()
    {
        if (IS_POST) {
            $warehouseModel = new RepertorylistModel();
            $repertoryData = $warehouseModel->getRepInfoWithProductionLimit();
            $str = "";
            foreach ($repertoryData as $val) {
                $tmpStr = empty($val['auditor_ids']) ? "" : "," . $val['auditor_ids'];
                $str = empty($str) ? $val['auditor_ids'] : $str . $tmpStr;
            }
            $map['id'] = ['in', $str];
            $auditorIds = M('staff')->where($map)->field('id auditor_id,name auditor_name')->select();
            $data['warehouse'] = $repertoryData;
            $data['auditor'] = $auditorIds;
            $this->returnAjaxMsg('ok', 200, $data);
        } else {
            die('非法');
        }
    }




    /**
     * 生产线列表
     */
    public function productionLineList(){
        if(IS_POST){
            $lineModel = new ProductionLineModel();
            $lineData = $lineModel->getProductionLine();
            $childLineData = $lineModel->getProductionChildLine();

            $childLineMap = [];
            foreach ($childLineData as $k => $v){
                $childLineMap[$v['pid']][] = $v;
            }

            foreach ($lineData as $key => &$value){
                $value['child_line_data'] = $childLineMap[$value['id']];
                $value['manufacturability'] = array_sum(array_column($childLineMap[$value['id']], 'manufacturability'));
            }
            unset($value);

            $this->returnAjaxMsg("数据获取成功", 200, $lineData);
        }else{
            $staffModel = new StaffModel();
            $staffData = $staffModel->field("id, name")->where(['deptid' => 52])->select();
            $this->assign([
                'staffMap' => $staffData
            ]);
            $this->display();
        }
    }

    /**
     * 生产线删除
     */
    public function delProductionLine(){
        if(IS_POST){
            $id = I("post.id");
            if(empty($id)){
                $this->returnAjaxMsg("参数不全",400);
            }

            $lineModel = new ProductionLineModel();
            $data = $lineModel->find($id);
            if(empty($data['pid'])){
                $this->returnAjaxMsg("父级生产线不可以删除",400);
            }
            $res = $lineModel->where(['id' => $id])->setField(['is_del' => ProductionLineModel::$isDel]);
            if($res === false){
                $this->returnAjaxMsg($lineModel->getError(), 400);
            }

            $this->returnAjaxMsg("生产线删除成功",200);
        }else {
            die("非法");
        }
    }

    /**
     *  修改生产线数据
     */
    public function editProductionLine(){
        if(IS_POST){
            $postData = I("post.");

            if(empty($postData['id'])){
                $this->returnAjaxMsg("参数不全",400);
            }
            $lineModel = new ProductionLineModel();
            $data = $lineModel->editProductionLine($postData);
            $this->ajaxReturn($data);
        }else {
            die("非法");
        }
    }

}